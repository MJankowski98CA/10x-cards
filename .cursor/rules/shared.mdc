---
description: 
globs: 
alwaysApply: true
---
---
Rule Type: Always
---

# AI Rules for Flashcards AI

The AI fiche application aims to make the process of creating educational fiches faster and easier. The project includes the ability to both manually add fiches and have them automatically generated by the AI module based on the entered text (from 1000 to 10000 characters). The fiches are then saved and assigned to a selected group, which supports the organization of the learning process. Users are able to view the fiches, mark them as mastered, and reset the entire group to repeat the material. The tool will use an external repetition algorithm (spaced repetition) based on open-source libraries to optimally plan the learning process.

## Tech Stack

- Vite 6
- TypeScript 5
- React 19
- Tailwind 4
- PNPM

## Project Structure

When introducing changes to the project, always follow the directory structure below:

- `./src` - source code
- `./src/layouts` - Astro layouts
- `./src/pages` - Astro pages
- `./src/pages/api` - API endpoints
- `./src/components` - client-side components written in Astro (static) and React (dynamic)
- `./src/assets` - static internal assets
- `./public` - public assets

When modifying the directory structure, always update this section.

## Coding practices

### Guidelines for clean code

- Prioritize error handling and edge cases
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.
